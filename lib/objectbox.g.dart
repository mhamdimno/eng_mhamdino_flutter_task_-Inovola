// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/dropdowns/categories/data/model/cateogory_model.dart';
import 'features/dropdowns/currency/data/model/currency_model.dart';
import 'features/home/data/model/expense_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5464478845651751183),
      name: 'CateogoryModel',
      lastPropertyId: const obx_int.IdUid(4, 509496398188026818),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4671595712089713214),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 427670407765063534),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7513080135851139839),
            name: 'iconName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 509496398188026818),
            name: 'sortOrder',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 3000888102721171665),
      name: 'ExpenseModel',
      lastPropertyId: const obx_int.IdUid(8, 1972629998024514638),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9151614238243874710),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1924476371122966949),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2411461138081273026),
            name: 'date',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1403895419108868394),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 644814746861052309),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 4784991890285626960),
            relationTarget: 'CateogoryModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6149973511837116975),
            name: 'currencyId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 2311348856379116572),
            relationTarget: 'CurrencyModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8612298603733957292),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1972629998024514638),
            name: 'dateSelected',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 6826126445597730193),
      name: 'CurrencyModel',
      lastPropertyId: const obx_int.IdUid(3, 133149445475878682),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7749186785179200463),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3433061086898647678),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 133149445475878682),
            name: 'value',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 6826126445597730193),
      lastIndexId: const obx_int.IdUid(4, 2311348856379116572),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        2783423477340594946,
        1289564662203916190,
        4648372564074395139
      ],
      retiredIndexUids: const [66643461056591497],
      retiredPropertyUids: const [
        3353481886930588607,
        3291590311730618855,
        2831156021102317134,
        3960662533235661751,
        5625059783363547907,
        7695104187259260344,
        3803902712802321562,
        2189177016012830659,
        1266363382719582038,
        8068000552288603678,
        3686812921040012155,
        6839489210673280994,
        624813059317328989,
        1516900736423468034
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CateogoryModel: obx_int.EntityDefinition<CateogoryModel>(
        model: _entities[0],
        toOneRelations: (CateogoryModel object) => [],
        toManyRelations: (CateogoryModel object) => {},
        getId: (CateogoryModel object) => object.id,
        setId: (CateogoryModel object, int id) {
          object.id = id;
        },
        objectToFB: (CateogoryModel object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final iconNameOffset = object.iconName == null
              ? null
              : fbb.writeString(object.iconName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, iconNameOffset);
          fbb.addInt64(3, object.sortOrder);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final iconNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final sortOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = CateogoryModel(
              id: idParam,
              title: titleParam,
              iconName: iconNameParam,
              sortOrder: sortOrderParam);

          return object;
        }),
    ExpenseModel: obx_int.EntityDefinition<ExpenseModel>(
        model: _entities[1],
        toOneRelations: (ExpenseModel object) =>
            [object.category, object.currency],
        toManyRelations: (ExpenseModel object) => {},
        getId: (ExpenseModel object) => object.id,
        setId: (ExpenseModel object, int id) {
          object.id = id;
        },
        objectToFB: (ExpenseModel object, fb.Builder fbb) {
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addFloat64(1, object.amount);
          fbb.addOffset(2, dateOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addInt64(4, object.category.targetId);
          fbb.addInt64(5, object.currency.targetId);
          fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.dateSelected?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateSelectedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final amountParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final object = ExpenseModel(
              id: idParam,
              amount: amountParam,
              date: dateParam,
              image: imageParam,
              createdAt: createdAtParam)
            ..dateSelected = dateSelectedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateSelectedValue);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.category.attach(store);
          object.currency.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.currency.attach(store);
          return object;
        }),
    CurrencyModel: obx_int.EntityDefinition<CurrencyModel>(
        model: _entities[2],
        toOneRelations: (CurrencyModel object) => [],
        toManyRelations: (CurrencyModel object) => {},
        getId: (CurrencyModel object) => object.id,
        setId: (CurrencyModel object, int id) {
          object.id = id;
        },
        objectToFB: (CurrencyModel object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, codeOffset);
          fbb.addFloat64(2, object.value);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = CurrencyModel(code: codeParam, value: valueParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CateogoryModel] entity fields to define ObjectBox queries.
class CateogoryModel_ {
  /// See [CateogoryModel.id].
  static final id =
      obx.QueryIntegerProperty<CateogoryModel>(_entities[0].properties[0]);

  /// See [CateogoryModel.title].
  static final title =
      obx.QueryStringProperty<CateogoryModel>(_entities[0].properties[1]);

  /// See [CateogoryModel.iconName].
  static final iconName =
      obx.QueryStringProperty<CateogoryModel>(_entities[0].properties[2]);

  /// See [CateogoryModel.sortOrder].
  static final sortOrder =
      obx.QueryIntegerProperty<CateogoryModel>(_entities[0].properties[3]);
}

/// [ExpenseModel] entity fields to define ObjectBox queries.
class ExpenseModel_ {
  /// See [ExpenseModel.id].
  static final id =
      obx.QueryIntegerProperty<ExpenseModel>(_entities[1].properties[0]);

  /// See [ExpenseModel.amount].
  static final amount =
      obx.QueryDoubleProperty<ExpenseModel>(_entities[1].properties[1]);

  /// See [ExpenseModel.date].
  static final date =
      obx.QueryStringProperty<ExpenseModel>(_entities[1].properties[2]);

  /// See [ExpenseModel.image].
  static final image =
      obx.QueryStringProperty<ExpenseModel>(_entities[1].properties[3]);

  /// See [ExpenseModel.category].
  static final category = obx.QueryRelationToOne<ExpenseModel, CateogoryModel>(
      _entities[1].properties[4]);

  /// See [ExpenseModel.currency].
  static final currency = obx.QueryRelationToOne<ExpenseModel, CurrencyModel>(
      _entities[1].properties[5]);

  /// See [ExpenseModel.createdAt].
  static final createdAt =
      obx.QueryDateProperty<ExpenseModel>(_entities[1].properties[6]);

  /// See [ExpenseModel.dateSelected].
  static final dateSelected =
      obx.QueryDateProperty<ExpenseModel>(_entities[1].properties[7]);
}

/// [CurrencyModel] entity fields to define ObjectBox queries.
class CurrencyModel_ {
  /// See [CurrencyModel.id].
  static final id =
      obx.QueryIntegerProperty<CurrencyModel>(_entities[2].properties[0]);

  /// See [CurrencyModel.code].
  static final code =
      obx.QueryStringProperty<CurrencyModel>(_entities[2].properties[1]);

  /// See [CurrencyModel.value].
  static final value =
      obx.QueryDoubleProperty<CurrencyModel>(_entities[2].properties[2]);
}
